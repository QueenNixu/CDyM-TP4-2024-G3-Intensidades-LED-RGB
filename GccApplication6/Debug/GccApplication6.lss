
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002cc  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126d  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b37  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a56  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00002d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f4  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000566  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003c6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

volatile uint8_t color_recieved_flag = 0;

int main(void) {
	// Inicializar UART con configuración 9600bps, 8 bits de datos, 1 bit de parada
	SerialPort_Init(0x68);
  a6:	88 e6       	ldi	r24, 0x68	; 104
  a8:	0e 94 2f 01 	call	0x25e	; 0x25e <SerialPort_Init>
	SerialPort_TX_Enable();
  ac:	0e 94 39 01 	call	0x272	; 0x272 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
  b0:	0e 94 3f 01 	call	0x27e	; 0x27e <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
  b4:	0e 94 45 01 	call	0x28a	; 0x28a <SerialPort_RX_Interrupt_Enable>
	
	// Inicializar ADC y PWM
	ADC_Init();
  b8:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_Init>
	PWM_Init();
  bc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Init>
	
	// Configurar el PWM para el manejo de intensidad del rojo
	//PWM_START;
	PWM_Init();
  c0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM_Init>
	LED_init();
  c4:	0e 94 c6 00 	call	0x18c	; 0x18c <LED_init>
	
	sei();  // Habilitar interrupciones globales
  c8:	78 94       	sei
	
	while (1) {
		if (color_recieved_flag) {
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  ce:	88 23       	and	r24, r24
  d0:	e1 f3       	breq	.-8      	; 0xca <main+0x24>
			// Leer el valor del ADC para el color seleccionado
			uint16_t adc_value = ADC_Read(3);
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 78 00 	call	0xf0	; 0xf0 <ADC_Read>
			update_color_intensity(adc_value);
  d8:	0e 94 a3 00 	call	0x146	; 0x146 <update_color_intensity>
			
			// Enviar intensidades de color por UART
			//UART_send_color_intensity();
			
			// Limpiar el flag
			color_recieved_flag = 0;
  dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  e0:	f4 cf       	rjmp	.-24     	; 0xca <main+0x24>

000000e2 <ADC_Init>:
#include "ADC.h"
#include <avr/io.h>

void ADC_Init(void) {
	// Seleccionar la referencia de voltaje: AVcc, canal ADC3
	ADMUX = (1<<REFS0); // AVcc como referencia
  e2:	80 e4       	ldi	r24, 0x40	; 64
  e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Habilitar el ADC y establecer el prescaler a 128 (para una frecuencia de reloj de 16 MHz)
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  e8:	87 e8       	ldi	r24, 0x87	; 135
  ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ee:	08 95       	ret

000000f0 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Seleccionar el canal ADC (enmascarar los 3 bits más bajos del canal)
	channel &= 0x07;
  f0:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8) | channel;
  f2:	ec e7       	ldi	r30, 0x7C	; 124
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	89 2b       	or	r24, r25
  fc:	80 83       	st	Z, r24

	// Iniciar la conversión
	ADCSRA |= (1<<ADSC);
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 64       	ori	r24, 0x40	; 64
 106:	80 83       	st	Z, r24
	// Esperar a que la conversión termine
	while (ADCSRA & (1<<ADSC));
 108:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 10c:	86 fd       	sbrc	r24, 6
 10e:	fc cf       	rjmp	.-8      	; 0x108 <ADC_Read+0x18>
	// Leer el valor del ADC (ADCL primero, luego ADCH)
	return ADCW;
 110:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 114:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 118:	08 95       	ret

0000011a <setPWM_red>:
		break;
	}
}

void setPWM_red(uint8_t red) {
	PWM_delta = 255 - red; // Ajusta el valor de PWM_delta para controlar la intensidad del rojo
 11a:	80 95       	com	r24
 11c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PWM_delta>
 120:	08 95       	ret

00000122 <setPWM_green>:
}

void setPWM_green(uint8_t green) {
	OCR1B = 255 - green; // Invertir el valor para el ánodo común
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	28 1b       	sub	r18, r24
 128:	31 09       	sbc	r19, r1
 12a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 12e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 132:	08 95       	ret

00000134 <setPWM_blue>:
}

void setPWM_blue(uint8_t blue) {
	OCR1A = 255 - blue; // Invertir el valor para el ánodo común
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	28 1b       	sub	r18, r24
 13a:	31 09       	sbc	r19, r1
 13c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 140:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 144:	08 95       	ret

00000146 <update_color_intensity>:
volatile uint8_t green_intensity = 0;
volatile uint8_t blue_intensity = 0;
volatile char current_color = 'B';

void update_color_intensity(uint16_t adc_value) {
	uint16_t intensity = adc_value / 4;
 146:	9c 01       	movw	r18, r24
 148:	36 95       	lsr	r19
 14a:	27 95       	ror	r18
 14c:	36 95       	lsr	r19
 14e:	27 95       	ror	r18
	switch (current_color) {
 150:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	97 34       	cpi	r25, 0x47	; 71
 156:	61 f0       	breq	.+24     	; 0x170 <update_color_intensity+0x2a>
 158:	92 35       	cpi	r25, 0x52	; 82
 15a:	19 f0       	breq	.+6      	; 0x162 <update_color_intensity+0x1c>
 15c:	92 34       	cpi	r25, 0x42	; 66
 15e:	a9 f4       	brne	.+42     	; 0x18a <update_color_intensity+0x44>
 160:	0e c0       	rjmp	.+28     	; 0x17e <update_color_intensity+0x38>
		case 'R':
		red_intensity = intensity;
 162:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <red_intensity>
		setPWM_red(red_intensity);
 166:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <red_intensity>
 16a:	0e 94 8d 00 	call	0x11a	; 0x11a <setPWM_red>
		break;
 16e:	08 95       	ret
		case 'G':
		green_intensity = intensity;
 170:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <green_intensity>
		setPWM_green(green_intensity);
 174:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <green_intensity>
 178:	0e 94 91 00 	call	0x122	; 0x122 <setPWM_green>
		break;
 17c:	08 95       	ret
		case 'B':
		blue_intensity = intensity;
 17e:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <blue_intensity>
		setPWM_blue(blue_intensity);
 182:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <blue_intensity>
 186:	0e 94 9a 00 	call	0x134	; 0x134 <setPWM_blue>
 18a:	08 95       	ret

0000018c <LED_init>:
void setPWM_blue(uint8_t blue) {
	OCR1A = 255 - blue; // Invertir el valor para el ánodo común
}

void LED_init() {
	setPWM_red(0);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 8d 00 	call	0x11a	; 0x11a <setPWM_red>
	setPWM_green(0);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 91 00 	call	0x122	; 0x122 <setPWM_green>
	setPWM_blue(0);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 9a 00 	call	0x134	; 0x134 <setPWM_blue>
 19e:	08 95       	ret

000001a0 <Timer0_Init>:

volatile uint8_t PWM_delta = PWM_DELTA;

void Timer0_Init(void) {
	// Configurar el temporizador 0 en modo CTC (Clear Timer on Compare Match)
	TCCR0A = (1<<WGM01); // Modo CTC
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01) | (1<<CS00); // Prescaler 64
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	95 bd       	out	0x25, r25	; 37

	// Configurar el valor de comparación para generar interrupciones periódicas
	OCR0A = (F_CPU / 64 / 256 / 50) - 1; // Ajustar para 50 Hz con 256 niveles
 1a8:	92 e1       	ldi	r25, 0x12	; 18
 1aa:	97 bd       	out	0x27, r25	; 39

	// Habilitar la interrupción de comparación
	TIMSK0 = (1<<OCIE0A);
 1ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 1b0:	08 95       	ret

000001b2 <PWM_Init>:
}

void PWM_Init(void) {
	// Configurar los pines PB5, PB2, PB1 como salidas
	DDRB |= (1<<DDB5) | (1<<DDB2) | (1<<DDB1);
 1b2:	84 b1       	in	r24, 0x04	; 4
 1b4:	86 62       	ori	r24, 0x26	; 38
 1b6:	84 b9       	out	0x04, r24	; 4

	// Configurar los temporizadores para generar señales PWM en los pines PB5, PB2, PB1
	// Temporizador 1 para PB1 (OC1A) y PB2 (OC1B)
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
 1b8:	81 ea       	ldi	r24, 0xA1	; 161
 1ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | (1<<CS11);
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	Timer0_Init();
 1c4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Timer0_Init>
	PWM_START;
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	84 b9       	out	0x04, r24	; 4
 1ce:	08 95       	ret

000001d0 <PWM_soft_Update>:
}

void PWM_soft_Update(void) {
	static uint16_t PWM_position = 0;
	if (++PWM_position >= PWM_PERIOD) {
 1d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PWM_position.1618>
 1d4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <PWM_position.1618+0x1>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <PWM_position.1618+0x1>
 1de:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <PWM_position.1618>
 1e2:	8f 3f       	cpi	r24, 0xFF	; 255
 1e4:	91 05       	cpc	r25, r1
 1e6:	29 f0       	breq	.+10     	; 0x1f2 <PWM_soft_Update+0x22>
 1e8:	20 f0       	brcs	.+8      	; 0x1f2 <PWM_soft_Update+0x22>
		PWM_position = 0;
 1ea:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <PWM_position.1618+0x1>
 1ee:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <PWM_position.1618>
	}
	if (PWM_position < PWM_delta) {
 1f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PWM_delta>
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PWM_position.1618>
 1fc:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <PWM_position.1618+0x1>
 200:	28 17       	cp	r18, r24
 202:	39 07       	cpc	r19, r25
 204:	20 f4       	brcc	.+8      	; 0x20e <PWM_soft_Update+0x3e>
		PWM_ON;
 206:	85 b1       	in	r24, 0x05	; 5
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	08 95       	ret
		} else {
		PWM_OFF;
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	8f 7d       	andi	r24, 0xDF	; 223
 212:	85 b9       	out	0x05, r24	; 5
 214:	08 95       	ret

00000216 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect) {
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	PWM_soft_Update();
 238:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <PWM_soft_Update>
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 25e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 262:	96 e0       	ldi	r25, 0x06	; 6
 264:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 268:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 26c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 270:	08 95       	ret

00000272 <SerialPort_TX_Enable>:
 272:	e1 ec       	ldi	r30, 0xC1	; 193
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <SerialPort_RX_Enable>:


// Inicializaci�n de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 27e:	e1 ec       	ldi	r30, 0xC1	; 193
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 61       	ori	r24, 0x10	; 16
 286:	80 83       	st	Z, r24
 288:	08 95       	ret

0000028a <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 28a:	e1 ec       	ldi	r30, 0xC1	; 193
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 68       	ori	r24, 0x80	; 128
 292:	80 83       	st	Z, r24
 294:	08 95       	ret

00000296 <__vector_18>:
extern volatile uint8_t green_intensity;
extern volatile uint8_t blue_intensity;
extern volatile uint8_t color_recieved_flag;
extern volatile char current_color;

ISR(USART_RX_vect) {
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	8f 93       	push	r24
	char received_char = UDR0;
 2a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (received_char == 'R' || received_char == 'G' || received_char == 'B') {
 2a6:	82 35       	cpi	r24, 0x52	; 82
 2a8:	21 f0       	breq	.+8      	; 0x2b2 <__vector_18+0x1c>
 2aa:	87 34       	cpi	r24, 0x47	; 71
 2ac:	11 f0       	breq	.+4      	; 0x2b2 <__vector_18+0x1c>
 2ae:	82 34       	cpi	r24, 0x42	; 66
 2b0:	29 f4       	brne	.+10     	; 0x2bc <__vector_18+0x26>
		current_color = received_char;
 2b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		color_recieved_flag = 1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
}
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <_exit>:
 2c8:	f8 94       	cli

000002ca <__stop_program>:
 2ca:	ff cf       	rjmp	.-2      	; 0x2ca <__stop_program>
